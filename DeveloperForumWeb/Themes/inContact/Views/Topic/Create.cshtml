@using MVCForum.Domain.Constants
@using System.Configuration
@model MVCForum.Website.ViewModels.CreateTopicViewModel
@{
    ViewBag.Title = Html.LanguageString("Topic.CreateDiscussion");
    Model.Category = TempData[AppConstants.DefaultCategoryViewBagName] != null ?
                    Guid.Parse(TempData[AppConstants.DefaultCategoryViewBagName].ToString()) : Model.Categories.FirstOrDefault().Id;

}

@section Scripts
{
    @(
         Bundle.JavaScript()
                    .Add("~/Scripts/jquery.validate.min.js")
                    .Add("~/Scripts/jquery.validate.unobtrusive.min.js")
                    .Add("~/Scripts/jquery.tagsinput.min.js")
                    .Add("~/Scripts/tags.js")

                    .MvcRender("~/scripts/cache/topic-combined_#.js")
    )
    <script type="text/javascript">
        counter = 0;
    </script>
    @if (!Context.IsMobileDevice())
    {
        <link href="@Url.Content("~/scripts/markdown/markdown.css")" rel="stylesheet" />
        <script src="@Url.Content("~/scripts/markdown/Markdown.Converter.js")"></script>
        <script src="@Url.Content("~/scripts/markdown/Markdown.Sanitizer.js")"></script>
        <script src="@Url.Content("~/scripts/markdown/Markdown.Editor.js")"></script>
        <script type="text/javascript">
            $(function () {
                //Bit of a hack but won't work without
                var wdinput = $('.wmd-input');
                wdinput.attr('id', "wmd-input");

                var converter = new Markdown.Converter();
                //var converter = Markdown.getSanitizingConverter();
                var editor = new Markdown.Editor(converter);
                editor.run();
            });
        </script>
    }

}

@section side
{
    @Html.Action("ListCategorySideMenu", "Category")
    @Html.Action("PopularTags", "Tag")
}
<section class="breadcrumb-trail page-header">
    <a href="/">Home</a> &raquo;
    <a href="@ConfigurationManager.AppSettings["ForumHomeUrl"]">Forum</a> &raquo;
    @ViewBag.Title
</section>


<div class="createtopicholder">

    @using (Html.BeginForm("Create", "Topic", FormMethod.Post, new { @class = "form-horizontal" }))
    {
        @Html.ValidationSummary(false)
        @Html.AntiForgeryToken()

        <div class="row-fluid paddedrow">
            <div class="span8 topictitleholder page-header">
                <h2>@ViewBag.Title</h2>
            </div>
            @if (Html.Settings().EnablePolls == true)
            {
                <div class="span4 pollcreatebuttonholder">
                    <a href="#" class="btn createpollbutton">@Html.LanguageString("Poll.Button.Create")</a>
                    <a href="#" style="display: none;" class="btn removepollbutton">@Html.LanguageString("Poll.Button.Remove")</a>
                </div>
            }
        </div>

        <div class="row-fluid paddedrow">
            <div class="span12 topicname">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Name)
                </div>
                <div class="editor-field">
                    @Html.TextBoxFor(model => model.Name, new { @class = "createtopicname" })
                    @Html.ValidationMessageFor(model => model.Name)
                </div>
            </div>
        </div>

        <div class="row-fluid paddedrow relatedtopicsholder">
            <div class="span12 relatedtopics">
                <h5>@Html.LanguageString("Topic.AlreadyAnswered")</h5>
                <div class="relatedtopicskey"></div>
            </div>
        </div>

        if (Html.Settings().EnablePolls == true)
        {
            <div class="row-fluid paddedrow pollanswerholder" style="display: none;">
                <div class="span10">
                    <ul class="pollanswerlist"></ul>
                    <input type="hidden" id="pollanswerplaceholder" value="@Html.LanguageString("Poll.Placeholder.TypeAnswerHere")" />
                </div>
                <div class="span2 polladdremovenewanswers">
                    <a href="#" class="btn addanswer"><i class="icon-plus-sign"></i></a><a href="#" class="btn removeanswer"><i class="icon-minus-sign"></i></a>
                </div>
            </div>
        }

        <div class="row-fluid">
            <div class="span12 topiccontent">
                <div class="editor-field editorholder">
                    @Html.EditorFor(model => model.Content)
                    @Html.ValidationMessageFor(model => model.Content)
                </div>
            </div>
        </div>

        <div class="row-fluid">
            <div class="span6 createtopicbuttonholder">
                <div class="submit-holder">
                    <input type="submit" class="btn btn-large btn-success" value="@Html.LanguageString("Topic.CreateDiscussion")" />
                </div>
            </div>
            <div class="span6 topiccategory">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Category)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.Category, new SelectList(Model.Categories, "id", "Name"))
                    @Html.ValidationMessageFor(model => model.Category)
                </div>
            </div>
        </div>


        <div class="topicoptionsholder">

            <h3>@Html.LanguageString("Topic.OptionsHeading")</h3>

            <div class="row-fluid">
                <div class="span12 topicreplynotify">
                    <div class="editor-field n3ocheckboxfield">
                        @Html.CheckBoxFor(x => x.SubscribeToTopic)
                        @Html.LabelFor(model => model.SubscribeToTopic)
                    </div>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12 topictagholder">
                    <div class="editor-field">
                        @Html.TextAreaFor(model => model.Tags, new { @class = "tagstextarea tags", title = Html.LanguageString("Topic.TagThisTopic") })
                    </div>
                </div>
            </div>
        </div>

    }

</div>

