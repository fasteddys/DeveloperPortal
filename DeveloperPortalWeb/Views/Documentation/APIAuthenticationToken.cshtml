@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "API Authentication Token";
}

<h1 class="primary-color">
    @ViewBag.Title
</h1>
<p>
    By the end of this tutorial you should understand:
</p>
<p>
    <ul>
        <li>
            What an API authentication token is and why it is required.
        </li>
        <li>
            What a "grant type" is and when to use each type in your applications.
        </li>
    </ul>
</p>
<h3 class="primary-color">
    OAuth2 Authentication Overview
</h3>
<p class="text-justify">
    To use any of the NICE CXone APIs, you must have a current and valid API Authentication Token.
    There are two process to accomplish this depending on your administration portal.

</p>
<p>
    If your administration portal is UserHub your token process is documented
    <a href="https://developer.niceincontact.com/Documentation/UserHubGettingStarted" target="_blank"> here</a>.
    UserHub uses a key exchange process rather than the OAuth2 process documented below.
</p>
<p>
    If your administration portal is Central please continue.
</p>
<p>
    Tokens are generated by the
    NICE CXone Token Service which is an OAuth 2.0-based service, and follows the
    <a href="http://tools.ietf.org/html/rfc6749" target="_blank">OAuth 2.0 specification</a>.
</p>
<p class="text-justify">
    In the current version of the NICE CXone API Framework, only the Implicit, Password, and Client "grant types"
    are fully implemented.
</p>
<p class="text-justify">
    Each OAuth grant type is designed for optimal security and usability for applications based on how that application is used
    and what access it requires in the NICE CXone system. You must decide which token grant type you will use in your application
    based on the following recommendations:
</p>
<p>
    <ul>
        <li>
            <u><b>Implicit:</b></u> If your application is a web-server-based application, or a browser-based application,
            and if it needs access to resources on behalf of a specific user, you should use the Implicit grant type.  A good example of this
            type of application is when you install a 3rd party extension to a software application that needs to request permission from the user
            for access from the user account in the software application.  <b>Implicit tokens are valid for 60 days and do not include a refresh token.</b>
        </li>
        <li>
            <u><b>Password:</b></u> If your application is server-based (but not running on a web server),
            or desktop-based (but not running in a browser), or a native mobile application, and if it needs access to resources on behalf of
            a specific user, you should use the Password grant type.  <b>Password tokens are valid for 3600 seconds and include a refresh token that is valid for 7200 seconds.</b>
        </li>
        <li>
            <u><b>Client:</b></u> If your application does not need access to NICE CXone resources that are not owned
            by a specific user, regardless of whether it is server-based, browser-based, desktop-based, or mobile,
            you should use the Client grant type.  <b>Client tokens are valid for 3600 seconds and do not include a refresh token.</b>
        </li>
    </ul>
</p>
<h3 class="primary-color">
    Implicit Tokens
</h3>
<p class="text-justify">
    Implicit tokens are best used for web applications that run in a browser (such as JavaScript applications) or on a web server
    and that are accessed through a browser. Implicit tokens contain information about a specific user.
    The Implicit Token grant process is a two-stage process where the user is directed by your application to a
    special NICE CXone authentication web site, where they enter their NICE CXone credentials and then asks them to grant
    the requested types of permission needed by the application.
</p>
<p class="text-justify">
    When your application browses to the NICE CXone web site, it also sends a "requested redirect URI"
    where the NICE CXone web site will redirect the user after they successfully authenticate.
    The requested redirect URI must match one of the redirect URI’s you specify when you register the API Application with
    NICE CXone (see the @Html.ActionLink("getting started", "GettingStarted", "Documentation") tutorial).
    The API Authentication Token is sent by NICE CXone to the redirect URI (which also makes it available to the browser-based
    application).
</p>
<p class="text-justify">
    Your application can use this token directly to make API calls. The token identifies the application, the vendor,
    and the authenticated user. Any API calls made with the token will be limited by the user’s permissions within NICE CXone,
    and also by the scope of the application, as configured in the app registration.
</p>
<h3 class="primary-color">
    Password Tokens
</h3>
<p class="text-justify">
    Password tokens are best used for non-web applications that run on the desktop, on a server, or on a mobile device.
    The user credentials used to create a password token are either known by the application, or provided to the application
    by the user.
</p>
<p class="text-justify">
    Your application uses the username and password to request and receive an API Authentication Token directly from the
    NICE CXone authorization server. Password tokens contain information about the authenticated user.
    The user is authenticated by sending the user name and password along with the token request.
    If the user name and password are valid, a token is granted.
</p>
<p class="text-justify">
    The token identifies the application, the vendor, and the user. Any API calls made with the token will be limited by
    the user’s permissions within NICE CXone, and also by the limited scope of the application, as configured in the app registration.
</p>
<p>
    Implicit and Password tokens are required when making API calls that require a "user context". For example,
    retrieving a list of agents from the platform requires a user context, and the API call will fail if the user
    specified does not have the required permissions (even if the user name and password are valid).
</p>
<h3 class="primary-color">
    Client Tokens
</h3>
<p class="text-justify">
    Client tokens are used in browser-based, server-based, desktop-based, and mobile applications that
    do not need to identify a specific user. You do not send user name and password information with client token requests.
</p>
<p class="text-justify">
    Client tokens are useful for API calls that do not require a user context. For example,
    if you are creating a web page that allows a patron ("caller") to request a web chat with an agent,
    you would use the "Start Chat" API call. This call does not require a user context, since the patron making the request
    is not a user in the NICE CXone system.
</p>

<p class="indentation text-justify">
    <u><b>NOTE:</b></u> As a best security practice you should use the Client token whenever you are calling an API
    from a publicly available website outside of your domain control.  Although you can call any API method with
    the Implicit or Password token, using a Client token is more secure, since it is limited to the Patron scope and
    requires no user authentication information such as credentials that could be compromised by a rogue or malicious
    application running in the browser.
</p>
<p class="text-justify">
    Once the application has a token generated by the Token Service, it must send the token with each API call it makes.
    The token allows the NICE CXone API Framework to identify the application, the application vendor,
    and the user who is using the application (if applicable).
</p>
<p class="text-justify">
    <u><b>NOTE:</b></u>  The OAuth process above is being discontinued in the next couple years as authentication aligns to using
    token exchange and OpenId Connect.  Announcements and guides will be coming as the replacement processes are
    completed.  We aim to grant ample time for authentication process to be updated ahead of depreciating
    the OAuth service.
</p>